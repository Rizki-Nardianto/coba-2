{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Komputasi Numerik Numerical Computation NAMA: Rizki Nardianto NIM: 180411100069 PEMBIMBING: @mulaab REFERENSI: https://mulaab.github.io/ IPYNB SOURCE: <> PEMBAHASAN Toolkit Built-ins: statistics itertools Pandas NumPy SciPy Matplotlib Scikit-Learn","title":"Home"},{"location":"#komputasi-numerik","text":"Numerical Computation NAMA: Rizki Nardianto NIM: 180411100069 PEMBIMBING: @mulaab REFERENSI: https://mulaab.github.io/ IPYNB SOURCE: <>","title":"Komputasi Numerik"},{"location":"#pembahasan","text":"Toolkit Built-ins: statistics itertools Pandas NumPy SciPy Matplotlib Scikit-Learn","title":"PEMBAHASAN"},{"location":"KN_05_Integrasi_Numerik/","text":"Integrasi Numerik Inegrasi numerik merupakan hal penting dalam penyelesaian masalah sains dan Teknik. Hal itu penting karena manakala terjadi pendekatan analisis yang mengalami kebuntuan. Metode Klasik Dalam penerapan metode klasik terdapat beberapa metode Metode Trapezium Metode Titik Tengah Metode Simpson 1/3 Metode Trapezium Metode ini merupakan metode integrasi numerik yang didasarkan pada jumlah segmen-segmen berbentuk trapezium. Metode ini termasuk juga dalam Newton Cotes orde pertama, pada metode ini grafik fungsi $$y=f\\left( x\\right)$$ didekati dengan garis lurus yang menghubungkan titik (a, f(a)) dan (b, f(b)). Dengan demikian luas daerah yang dihasilkan akan dibatasi oleh kurva $$y=f\\left( x\\right)$$. pada garis x = a dan garis x = b dihampiri oleh trapezium yang dibatasi oleh garis lurus menghubungkan titik $$\\left( a,f\\left( a\\right) \\right)$$ dan \\left( b,f\\left( b\\right) \\right), dimana garis x = a dan garis x = b dan sumbu -x. Maka diperoleh [ ] Rumus Trazpezium segmen tunggal $$ \\int ^{b}_{a}f\\left( x\\right) dx\\approx \\left( b-a\\right) \\dfrac{f\\left( a\\right) +f\\left( b\\right) }{2} $$ [ ] Rumus Trapezium segemn ganda $$ \\int ^{b} {a}f\\left( x\\right) dx\\approx \\dfrac{h}{2}\\left( f\\left( x {0}\\right) +f\\left( x_{n}\\right) +2\\Sigma {i=1}^{n-1}f\\left( x {i}\\right) \\right) $$ Program komputer untuk metode trapezium menggunakan bahasa Python Pada contoh $$ \\int ^{10}_{1}x^{2}\\exp \\left( -1\\right) dx =1.833858414426188 $$ Import modul python import numpy as np import matplotlib.pyplot as plt Perhitungan Metode def func(x): return (x**2)*np.exp(-x) a = 1.0 b = 10.0 N = 10 dx = (b-a)/(N-1) x = np.linspace(a,b,N) sum = 0.0 for i in range (1, N-1): sum += func(x[i]) hasil = 0.5*dx*(func(x[0])+2.0*sum+func(x[-1])) print(hasil) Hasil Perhitungan 1.8025164595168974 Menampilan Grafik nd = 1000 xp = np.linspace(a,b,nd) plt.plot(xp, func(xp)) for i in range(N): plt.bar(x[i], func(x[i]), align='edge', width=0.00000001, edgecolor='red') plt.fill_between(x, func(x), color='gray') plt.show() Metode Titik Tengah Pada aturan titik tengah dapat diperoleh dengan cara yang sama seperti pada aturan trapezium. Dengan menevaluasi fungsi f(x) pada titik tengah setiap interval, maka kesalahanya akan lebih kecil dari pada menggunakan aturan trapezium. Pada gambar dibawah ini akan memberikan tafsiran bagaimana pendekatan metode ini. Kita dapat mereduksi kelahan dengan membagi unteval X0 hingga X1 menjadi n segmen yang lebih kecil. Dimana aturan titik tengah banyak segmen ini selanjutnya dapat dinyatakan menjadi. $$ \\int ^{x_{0}+Nh} {x}f\\left( x\\right) dx\\approx h\\sum ^{N-1} {n=0}f\\left( x_{0}+\\left( n+\\dfrac{1}{2}\\right) h\\right) $$ Program komputer untuk metode trapezium menggunakan bahasa Python Pada contoh $$ \\int ^{10}_{1}x^{2}\\exp \\left( -1\\right) dx =1.833858414426188 $$ Import modul python import numpy as np import matplotlib.pyplot as plt Perhitungan Metode def func(x): return (x**2)*np.exp(-x) a = 1.0 b = 10.0 N = 10 h = (b-a)/N x = np.linspace(a,b,N) sum = 0.0 for i in range (1, N-1): sum += func(x[i]) hasil = h*sum print(hasil) Hasil Perhitungan 1.4546760681987467 Menampilkan Grafik nd = 1000 xp = np.linspace(a,b,nd) plt.plot(xp, func(xp)) for i in range(N): plt.bar(x[i], func(x[i]), align='edge', width=0.00000001, edgecolor='red') plt.fill_between(x, func(x), color='gray') plt.show() Metode Simpson 1/3 Metode ini adalah metode alternatif dengan pendekatan integral disamping dua metode sebelumnya yaitu trapesiun dan titik tengah. Penggunaan metode ini diharapkan dapat diperoleh ketelitian yang lebih tinggi dari metode sebelunya meskipun lebar dari segmen h pada inegrasi diambil cukup lebar. Secara umum aturan Simpson 1/3 dapat dituliskan sebagai berikut $$ \\int ^{b} {a}f\\left( x\\right) d\\approx \\dfrac{h}{3}\\left[ f\\left( a\\right) +4\\sum ^{N/2-1} {i=0}f\\left( X_{2t+1}\\right) \\sum ^{N//2-1} {t=genap}f\\left( x {2t}\\right) +f\\left( b\\right) \\right] $$ Algoritma Program pada Metode Simpson 1/3 Definisi fungsi yang akan diinegrasikan Menentukan batas bawah b dan batas atas a integrasi Tentukan jumlah segmen N Hitung lebar segmen $$h=\\dfrac{b-a}{N}$$ Inisialisai jumlah $$sum = f\\left( a\\right) + f\\left( b\\right)$$ Inisialisasi factor bobot $$fak = 4$$ Hitung jumlah dari I = 1 hingga I = N \u2013 1 Tentukan node tiap-tiap $$xi = a + ih$$ Brikan syarat ( fak = 4), maka fak = 2 Hitung nilai $$sum = sum +fak *f(x)$$ Hitung hasil akhir penjumlahan $$hasil=\\dfrac{h}{3}\\ast sum$$ Program komputer untuk metode trapezium menggunakan bahasa Python Pada contoh $$ \\int ^{10}_{1}x^{2}\\exp \\left( -1\\right) dx =1.833858414426188 $$ Import modul python import numpy as np Perhitungan Metode def func(x): return (x**2)*np.exp(-x) a = 1.0 b = 10.0 N = 10 h = (b-a)/N x = np.linspace(a,b,N+1) sum_genap = 0.0 sum_ganjil = 0.0 for i in range(1, N): if np.mod(i,2) == 0: sum_genap = sum_genap + 2*func(x[i]) else: sum_ganjil = sum_ganjil + 4*func(x[i]) hasil = (h/3)*(func(a)+sum_ganjil+sum_genap+func(b)) print(hasil) Hasil Perhitungan 1.834044489480491 Daftar Pustaka Supardi, M.Si. BAB III Inegrasi Numerik. Nining Herfina, Amrullah, Junaidi. Efektifitas Metode Trapesium dan Simpson dalam Penentuan Luas Menggunakan Pemrograman Pascal. 1 Juni 2019.","title":"Integrasi Numerik"},{"location":"KN_05_Integrasi_Numerik/#integrasi-numerik","text":"Inegrasi numerik merupakan hal penting dalam penyelesaian masalah sains dan Teknik. Hal itu penting karena manakala terjadi pendekatan analisis yang mengalami kebuntuan.","title":"Integrasi Numerik"},{"location":"KN_05_Integrasi_Numerik/#metode-klasik","text":"Dalam penerapan metode klasik terdapat beberapa metode Metode Trapezium Metode Titik Tengah Metode Simpson 1/3","title":"Metode Klasik"},{"location":"KN_05_Integrasi_Numerik/#metode-trapezium","text":"Metode ini merupakan metode integrasi numerik yang didasarkan pada jumlah segmen-segmen berbentuk trapezium. Metode ini termasuk juga dalam Newton Cotes orde pertama, pada metode ini grafik fungsi $$y=f\\left( x\\right)$$ didekati dengan garis lurus yang menghubungkan titik (a, f(a)) dan (b, f(b)). Dengan demikian luas daerah yang dihasilkan akan dibatasi oleh kurva $$y=f\\left( x\\right)$$. pada garis x = a dan garis x = b dihampiri oleh trapezium yang dibatasi oleh garis lurus menghubungkan titik $$\\left( a,f\\left( a\\right) \\right)$$ dan \\left( b,f\\left( b\\right) \\right), dimana garis x = a dan garis x = b dan sumbu -x. Maka diperoleh [ ] Rumus Trazpezium segmen tunggal $$ \\int ^{b}_{a}f\\left( x\\right) dx\\approx \\left( b-a\\right) \\dfrac{f\\left( a\\right) +f\\left( b\\right) }{2} $$ [ ] Rumus Trapezium segemn ganda $$ \\int ^{b} {a}f\\left( x\\right) dx\\approx \\dfrac{h}{2}\\left( f\\left( x {0}\\right) +f\\left( x_{n}\\right) +2\\Sigma {i=1}^{n-1}f\\left( x {i}\\right) \\right) $$ Program komputer untuk metode trapezium menggunakan bahasa Python Pada contoh $$ \\int ^{10}_{1}x^{2}\\exp \\left( -1\\right) dx =1.833858414426188 $$ Import modul python import numpy as np import matplotlib.pyplot as plt Perhitungan Metode def func(x): return (x**2)*np.exp(-x) a = 1.0 b = 10.0 N = 10 dx = (b-a)/(N-1) x = np.linspace(a,b,N) sum = 0.0 for i in range (1, N-1): sum += func(x[i]) hasil = 0.5*dx*(func(x[0])+2.0*sum+func(x[-1])) print(hasil) Hasil Perhitungan 1.8025164595168974 Menampilan Grafik nd = 1000 xp = np.linspace(a,b,nd) plt.plot(xp, func(xp)) for i in range(N): plt.bar(x[i], func(x[i]), align='edge', width=0.00000001, edgecolor='red') plt.fill_between(x, func(x), color='gray') plt.show()","title":"Metode Trapezium"},{"location":"KN_05_Integrasi_Numerik/#metode-titik-tengah","text":"Pada aturan titik tengah dapat diperoleh dengan cara yang sama seperti pada aturan trapezium. Dengan menevaluasi fungsi f(x) pada titik tengah setiap interval, maka kesalahanya akan lebih kecil dari pada menggunakan aturan trapezium. Pada gambar dibawah ini akan memberikan tafsiran bagaimana pendekatan metode ini. Kita dapat mereduksi kelahan dengan membagi unteval X0 hingga X1 menjadi n segmen yang lebih kecil. Dimana aturan titik tengah banyak segmen ini selanjutnya dapat dinyatakan menjadi. $$ \\int ^{x_{0}+Nh} {x}f\\left( x\\right) dx\\approx h\\sum ^{N-1} {n=0}f\\left( x_{0}+\\left( n+\\dfrac{1}{2}\\right) h\\right) $$ Program komputer untuk metode trapezium menggunakan bahasa Python Pada contoh $$ \\int ^{10}_{1}x^{2}\\exp \\left( -1\\right) dx =1.833858414426188 $$ Import modul python import numpy as np import matplotlib.pyplot as plt Perhitungan Metode def func(x): return (x**2)*np.exp(-x) a = 1.0 b = 10.0 N = 10 h = (b-a)/N x = np.linspace(a,b,N) sum = 0.0 for i in range (1, N-1): sum += func(x[i]) hasil = h*sum print(hasil) Hasil Perhitungan 1.4546760681987467 Menampilkan Grafik nd = 1000 xp = np.linspace(a,b,nd) plt.plot(xp, func(xp)) for i in range(N): plt.bar(x[i], func(x[i]), align='edge', width=0.00000001, edgecolor='red') plt.fill_between(x, func(x), color='gray') plt.show()","title":"Metode Titik Tengah"},{"location":"KN_05_Integrasi_Numerik/#metode-simpson-13","text":"Metode ini adalah metode alternatif dengan pendekatan integral disamping dua metode sebelumnya yaitu trapesiun dan titik tengah. Penggunaan metode ini diharapkan dapat diperoleh ketelitian yang lebih tinggi dari metode sebelunya meskipun lebar dari segmen h pada inegrasi diambil cukup lebar. Secara umum aturan Simpson 1/3 dapat dituliskan sebagai berikut $$ \\int ^{b} {a}f\\left( x\\right) d\\approx \\dfrac{h}{3}\\left[ f\\left( a\\right) +4\\sum ^{N/2-1} {i=0}f\\left( X_{2t+1}\\right) \\sum ^{N//2-1} {t=genap}f\\left( x {2t}\\right) +f\\left( b\\right) \\right] $$ Algoritma Program pada Metode Simpson 1/3 Definisi fungsi yang akan diinegrasikan Menentukan batas bawah b dan batas atas a integrasi Tentukan jumlah segmen N Hitung lebar segmen $$h=\\dfrac{b-a}{N}$$ Inisialisai jumlah $$sum = f\\left( a\\right) + f\\left( b\\right)$$ Inisialisasi factor bobot $$fak = 4$$ Hitung jumlah dari I = 1 hingga I = N \u2013 1 Tentukan node tiap-tiap $$xi = a + ih$$ Brikan syarat ( fak = 4), maka fak = 2 Hitung nilai $$sum = sum +fak *f(x)$$ Hitung hasil akhir penjumlahan $$hasil=\\dfrac{h}{3}\\ast sum$$ Program komputer untuk metode trapezium menggunakan bahasa Python Pada contoh $$ \\int ^{10}_{1}x^{2}\\exp \\left( -1\\right) dx =1.833858414426188 $$ Import modul python import numpy as np Perhitungan Metode def func(x): return (x**2)*np.exp(-x) a = 1.0 b = 10.0 N = 10 h = (b-a)/N x = np.linspace(a,b,N+1) sum_genap = 0.0 sum_ganjil = 0.0 for i in range(1, N): if np.mod(i,2) == 0: sum_genap = sum_genap + 2*func(x[i]) else: sum_ganjil = sum_ganjil + 4*func(x[i]) hasil = (h/3)*(func(a)+sum_ganjil+sum_genap+func(b)) print(hasil) Hasil Perhitungan 1.834044489480491","title":"Metode Simpson 1/3"},{"location":"KN_05_Integrasi_Numerik/#daftar-pustaka","text":"Supardi, M.Si. BAB III Inegrasi Numerik. Nining Herfina, Amrullah, Junaidi. Efektifitas Metode Trapesium dan Simpson dalam Penentuan Luas Menggunakan Pemrograman Pascal. 1 Juni 2019.","title":"Daftar Pustaka"},{"location":"license/","text":"License MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Support Author Amazon wish list","title":"License"},{"location":"license/#license","text":"MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","title":"License"},{"location":"license/#support-author","text":"Amazon wish list","title":"Support Author"},{"location":"material-for-mkdocs/","text":"Material for MkDocs MkDocs mkdocs/mkdocs: Project documentation with Markdown - GitHub Material for MkDocs squidfunk/mkdocs-material: A Material Design theme for MkDocs","title":"Material for MkDocs"},{"location":"material-for-mkdocs/#material-for-mkdocs","text":"","title":"Material for MkDocs"},{"location":"material-for-mkdocs/#mkdocs","text":"mkdocs/mkdocs: Project documentation with Markdown - GitHub","title":"MkDocs"},{"location":"material-for-mkdocs/#material-for-mkdocs_1","text":"squidfunk/mkdocs-material: A Material Design theme for MkDocs","title":"Material for MkDocs"},{"location":"extensions/code-hilite/","text":"CodeHilite CodeHilite - Material for MkDocs Supported languages - Pygments Configure mkdocs.yml markdown_extensions: - codehilite","title":"CodeHilite"},{"location":"extensions/code-hilite/#codehilite","text":"CodeHilite - Material for MkDocs Supported languages - Pygments","title":"CodeHilite"},{"location":"extensions/code-hilite/#configure-mkdocsyml","text":"markdown_extensions: - codehilite","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/","text":"Footnote Footnotes - Material for MkDocs Configure mkdocs.yml markdown_extensions: - footnotes Example Footnote example 1.[^1] Footnote example 2.[^2] [^1]: One line [^2]: First line Second line","title":"Footnote"},{"location":"extensions/footnote/#footnote","text":"Footnotes - Material for MkDocs","title":"Footnote"},{"location":"extensions/footnote/#configure-mkdocsyml","text":"markdown_extensions: - footnotes","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/#example","text":"Footnote example 1.[^1] Footnote example 2.[^2] [^1]: One line [^2]: First line Second line","title":"Example"},{"location":"extensions/mathjax/","text":"MathJax PyMdown - Material for MkDocs Configure mkdocs.yml markdown_extensions: - mdx_math: enable_dollar_delimiter: True Example code $$ P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha $$ Example rendering $$ P\\cdot Q = |P||Q|\\cos\\alpha $$","title":"MathJax"},{"location":"extensions/mathjax/#mathjax","text":"PyMdown - Material for MkDocs","title":"MathJax"},{"location":"extensions/mathjax/#configure-mkdocsyml","text":"markdown_extensions: - mdx_math: enable_dollar_delimiter: True","title":"Configure mkdocs.yml"},{"location":"extensions/mathjax/#example-code","text":"$$ P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha $$","title":"Example code"},{"location":"extensions/mathjax/#example-rendering","text":"$$ P\\cdot Q = |P||Q|\\cos\\alpha $$","title":"Example rendering"},{"location":"getting-started/docker/","text":"Start with Docker Public docker image Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub docker-compose Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"Start with Docker"},{"location":"getting-started/docker/#start-with-docker","text":"","title":"Start with Docker"},{"location":"getting-started/docker/#public-docker-image","text":"Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub","title":"Public docker image"},{"location":"getting-started/docker/#docker-compose","text":"Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"docker-compose"},{"location":"getting-started/download-boilerplate/","text":"Download boilerplate Git clone git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate Download zip wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#download-boilerplate","text":"","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#git-clone","text":"git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate","title":"Git clone"},{"location":"getting-started/download-boilerplate/#download-zip","text":"wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download zip"},{"location":"getting-started/invoke/","text":"Serve and open with invoke invoke Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution. Serve and open Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml Show all tasks $ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv[oke] [--core-opts] serve [--options] [other tasks here ...] Docstring: Serve site and open browser Options: -c STRING, --config-file=STRING Provide a specific MkDocs config -d STRING, --dev-addr=STRING IP address and port to serve documentation locally (default: localhost:8000) Tasks are defined by tasks.py","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#serve-and-open-with-invoke","text":"","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#invoke","text":"Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution.","title":"invoke"},{"location":"getting-started/invoke/#serve-and-open","text":"Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml","title":"Serve and open"},{"location":"getting-started/invoke/#show-all-tasks","text":"$ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv[oke] [--core-opts] serve [--options] [other tasks here ...] Docstring: Serve site and open browser Options: -c STRING, --config-file=STRING Provide a specific MkDocs config -d STRING, --dev-addr=STRING IP address and port to serve documentation locally (default: localhost:8000) Tasks are defined by tasks.py","title":"Show all tasks"},{"location":"getting-started/pip/","text":"Start with pip (Anaconda, Miniconda) pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pip/#start-with-pip-anaconda-miniconda","text":"pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pipenv/","text":"Start with pipenv pipenv Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans. Install all packages pipenv sync --dev # Installs all packages specified in Pipfile.lock. Run MkDocs pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve pipenv run pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"Start with pipenv"},{"location":"getting-started/pipenv/#start-with-pipenv","text":"","title":"Start with pipenv"},{"location":"getting-started/pipenv/#pipenv","text":"Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans.","title":"pipenv"},{"location":"getting-started/pipenv/#install-all-packages","text":"pipenv sync --dev # Installs all packages specified in Pipfile.lock.","title":"Install all packages"},{"location":"getting-started/pipenv/#run-mkdocs","text":"pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve","title":"Run MkDocs"},{"location":"getting-started/pipenv/#pipenv-run","text":"pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"pipenv run"},{"location":"hosting-and-deployment/aws-amplify-console/","text":"Host on AWS Amplify Console AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/aws-amplify-console/#host-on-aws-amplify-console","text":"AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/combinations/","text":"Hosting and Deployment GitHub Pages and GitHub Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions GitLab Pages and GitLab Host source code on GitLab. Build and deploy with GitLab CI/CD. Netlify Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify. AWS Amplify Console Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#hosting-and-deployment","text":"","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#github-pages-and-github","text":"Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions","title":"GitHub Pages and GitHub"},{"location":"hosting-and-deployment/combinations/#gitlab-pages-and-gitlab","text":"Host source code on GitLab. Build and deploy with GitLab CI/CD.","title":"GitLab Pages and GitLab"},{"location":"hosting-and-deployment/combinations/#netlify","text":"Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify.","title":"Netlify"},{"location":"hosting-and-deployment/combinations/#aws-amplify-console","text":"Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"AWS Amplify Console"},{"location":"hosting-and-deployment/github-pages/","text":"Host on GitHub Pages Demo site on GitHub Pages (build & deploy with GitHub Actions) Build and deploy with GitHub Actions peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details. Build and deploy with mkdocs gh-deploy pipenv pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#host-on-github-pages","text":"Demo site on GitHub Pages (build & deploy with GitHub Actions)","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#build-and-deploy-with-github-actions","text":"peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details.","title":"Build and deploy with GitHub Actions"},{"location":"hosting-and-deployment/github-pages/#build-and-deploy-with-mkdocs-gh-deploy","text":"","title":"Build and deploy with mkdocs gh-deploy"},{"location":"hosting-and-deployment/github-pages/#pipenv","text":"pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"pipenv"},{"location":"hosting-and-deployment/gitlab-pages/","text":"Host on GitLab Pages See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/gitlab-pages/#host-on-gitlab-pages","text":"See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/netlify/","text":"Host on Netlify Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"},{"location":"hosting-and-deployment/netlify/#host-on-netlify","text":"Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"}]}